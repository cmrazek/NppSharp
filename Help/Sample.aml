<?xml version="1.0" encoding="utf-8"?>
<topic id="bd9bc6cd-319e-40c2-8f4e-352cbfdb8345" revisionNumber="1">
  <developerSampleDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>Required introduction</para>
    </introduction>
    <!-- <procedure>Optional procedures.  See How To document for procedure layout example.</procedure> -->
    <!-- <requirements>Optional requirements section</requirements> -->
    <!-- <demonstrates>Optional info about what is demonstrated</demonstrates> -->
    <!-- <codeExample>Optional code example</codeExample> -->
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>A Simple Test Script</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Below is a sample test script that writes a string to the output window.</para>
        <codeReference>SimpleTest#Code</codeReference>
        <para>
        	It uses the namespace <codeEntityReference qualifyHint="false">N:NppSharp</codeEntityReference>
        	to import the required classes from the plugin.
        	The SimpleTest class inherits from <codeEntityReference qualifyHint="false">T:NppSharp.NppScript</codeEntityReference>,
        	which provides the methods and properties needed in order to access Notepad++.
        	It then calls <codeEntityReference qualifyHint="false">T:NppSharp.OutputView</codeEntityReference>.<codeEntityReference qualifyHint="false" autoUpgrade="true">M:NppSharp.OutputView.Show</codeEntityReference>()
        	to make the output window visible (if it is not already) and
        	<codeEntityReference qualifyHint="false">T:NppSharp.OutputView</codeEntityReference>.<codeEntityReference qualifyHint="false" autoUpgrade="true">M:NppSharp.OutputView.WriteLine(System.String)</codeEntityReference>()
        	to perform the text output.
        </para>
        <para>
        	The above script will put the command &quot;Test&quot; into the NppSharp plugin menu.
        	<mediaLink>
				<image xlink:href="SimpleTestMenuItem"/>
			</mediaLink>
        	And will produce the following text in the output window:
        	<mediaLink>
				<image xlink:href="SimpleTestOutput"/>
			</mediaLink>
        </para>
        <para>
        	Obviously, real-world scripts will need to be more involved, but this helps illustrate the bare bones implementation of a user command.
        </para>
      </content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerSampleDocument>
</topic>